/* -*-c++-*- */
/* osgEarth - Dynamic map generation toolkit for OpenSceneGraph
 * Copyright 2008-2014 Pelican Mapping
 * http://osgearth.org
 *
 * osgEarth is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 */

#ifndef OSGEARTHSYMBOLOGY_MODEL_SYMBOL_H
#define OSGEARTHSYMBOLOGY_MODEL_SYMBOL_H 1

#include <climits>

#include <osgEarth/Common>
#include <osgEarthSymbology/InstanceSymbol>
#include <osg/Vec3f>

namespace osgEarth { namespace Symbology
{
    class InstanceResource;

    /**
     * Represents an external 3D model
     */
    class OSGEARTHSYMBOLOGY_EXPORT ModelSymbol : public InstanceSymbol
    {
    public:
        META_Object(osgEarthSymbology, ModelSymbol);

        ModelSymbol(const ModelSymbol& rhs,const osg::CopyOp& copyop=osg::CopyOp::SHALLOW_COPY);
        ModelSymbol( const Config& conf =Config() );

        /** dtor */
        virtual ~ModelSymbol() { }

        /** heading in degrees */
        optional<NumericExpression>& heading() { return _heading; }
        const optional<NumericExpression>& heading() const { return _heading; }

		 /** calculate heading from neighbors, use prev & next to calculate heading */
        optional<bool>& autoHeading() { return _autoHeading; }
        const optional<bool>& autoHeading() const { return _autoHeading; }

		/** heading bias in degrees */
        optional<float>& headingBias() { return _headingBias; }
        const optional<float>& headingBias() const { return _headingBias; }

        /** pitch in degrees */
        optional<NumericExpression>& pitch() { return _pitch; }
        const optional<NumericExpression>& pitch() const { return _pitch; }
        
        /** roll in degrees */
        optional<NumericExpression>& roll() { return _roll; }
        const optional<NumericExpression>& roll() const { return _roll; }

        /** whether to automatically scale the model from meters to pixels */
        optional<bool>& autoScale() { return _autoScale; }
        const optional<bool>& autoScale() const { return _autoScale; }

		 /** obsolute height of model, will scale model to have height 1, then apply height */
        optional<NumericExpression>& height() { return _height; }
        const optional<NumericExpression>& height() const { return _height; }
        
        
    public: // non-serialized properties (for programmatic use only)

        /** Explicit model to use for model placement */
        void setModel( osg::Node* node ) { _node = node; }
        osg::Node* getModel() const { return _node.get(); }

    public:
        virtual Config getConfig() const;
        virtual void mergeConfig( const Config& conf );
        static void parseSLD(const Config& c, class Style& style);
    
    public: // InstanceSymbol
        /** Creates a new (empty) resource appropriate for this symbol */
        virtual InstanceResource* createResource() const;

    protected:
        optional<NumericExpression>  _heading;
		optional<bool>				 _autoHeading;
		optional<float>				_headingBias;
        optional<NumericExpression>  _pitch;
        optional<NumericExpression>  _roll;
        optional<bool>               _autoScale;
		optional<NumericExpression>  _height;
        osg::ref_ptr<osg::Node>      _node;
    };

} } // namespace osgEarth::Symbology

#endif
